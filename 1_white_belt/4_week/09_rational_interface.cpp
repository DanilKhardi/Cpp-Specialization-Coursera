/*
Общее описание
	В этой задаче вам надо разработать класс для представления рациональных чисел и
внедрить его в систему типов языка С++ так, чтобы им можно было пользоваться
естественным образом. Задание состоит из нескольких частей. К каждой части
приложен файл с заготовкой программы.

	Вам нужно, не меняя тело функции main, реализовать то, что предложено в комментариях,
так, чтобы ваша программа выводила на экран сообщение OK. Функция main содержит ряд
юнит-тестов, которые проверяют правильность вашей реализации. Если эти тесты находят
ошибку в вашей реализации, то вместо OK программа выведет подсказку о том, что именно
работает неправильно.

	Когда ваша программа начнёт выводить OK, можете отправлять свой файл на проверку.
Ваша реализация будет тестироваться на другом, более полном наборе тестов. То есть, если
ваша программа выводит OK, то это не даёт гарантии, что ваша реализация будет принята
тестирующей системой. В случае неудачной посылки тестирующая система также выдаст вам
подсказку о том, какая именно часть реализации работает неправильно.

	Внимательно изучите набор юнит-тестов для каждой заготовки решения. Тесты описывают
требования, предъявляемые к вашей реализации, которые могут быть не указаны в условии задач

Часть 1
	В первой части Вам надо реализовать класс Rational, который представляет собой рациональное
число вида p/q, где p — целое, а q — натуральное и диапазоны возможных значений p, q таковы,
что могут быть представлены типом int.

	Класс Rational должен гарантировать, что p/q — это несократимая дробь.



Список требований, предъявляемых к реализации интерфейса класса Rational:

	1. Конструктор по умолчанию должен создавать дробь с числителем 0 и знаменателем 1.

	2. При конструировании объека класса Rational с параметрами p и q должно выполняться
	сокращение дроби p/q (здесь вам может пригодиться решение задачи «Наибольший общий делитель»).

	3. Если дробь p/q отрицательная, то объект Rational(p, q) должен иметь отрицательный
	числитель и положительный знаменатель.

	4. Если дробь p/q положительная, то объект Rational(p, q) должен иметь положительные числитель
	и знаменатель (обратите внимание на случай Rational(-2, -3)).

	5. Если числитель дроби равен нулю, то знаменатель должен быть равен 1.

 * */


#include <iostream>
#include <numeric>
using namespace std;

class Rational {
public:
    Rational() {
        // конструктор по умолчанию
    	p = 0;
    	q = 1;
    }

    Rational(const int numerator, int denominator) {
        // конструктор
    	const int commin_div = gcd(numerator, denominator);
    	p = numerator / commin_div; // сокращение числителя на НОД
    	q = denominator / commin_div; // сокращение знаменателя на НОД
    	if (q < 0){ // знаменатель д.б. положительным
    		p = -p;
    		q = -q;
    	}
    }

    int Numerator() const {
    	// возвращает числитель
    	return p;
    }

    int Denominator() const {
    	// возращает знаменатель
    	return q;
    }

private:
    int p;
    int q;
};

int main() {
    {
        const Rational r(3, 10);
        if (r.Numerator() != 3 || r.Denominator() != 10) {
            cout << "Rational(3, 10) != 3/10" << endl;
            return 1;
        }
    }

    {
        const Rational r(8, 12);
        if (r.Numerator() != 2 || r.Denominator() != 3) {
            cout << "Rational(8, 12) != 2/3" << endl;
            return 2;
        }
    }

    {
        const Rational r(-4, 6);
        if (r.Numerator() != -2 || r.Denominator() != 3) {
            cout << "Rational(-4, 6) != -2/3" << endl;
            return 3;
        }
    }

    {
        const Rational r(4, -6);
        if (r.Numerator() != -2 || r.Denominator() != 3) {
            cout << "Rational(4, -6) != -2/3" << endl;
            return 3;
        }
    }

    {
        const Rational r(0, 15);
        if (r.Numerator() != 0 || r.Denominator() != 1) {
            cout << "Rational(0, 15) != 0/1" << endl;
            return 4;
        }
    }

    {
        const Rational defaultConstructed;
        if (defaultConstructed.Numerator() != 0 || defaultConstructed.Denominator() != 1) {
            cout << "Rational() != 0/1" << endl;
            return 5;
        }
    }

    {
        const Rational r(-2, -3);
        if (r.Numerator() != 2 || r.Denominator() != 3) {
        	cout << r.Numerator() << " ! " << r.Denominator() << endl;
            cout << "Rational(-2, -3) != 2/3" << endl;
            return 3;
        }
    }

    cout << "OK" << endl;
    return 0;
}

