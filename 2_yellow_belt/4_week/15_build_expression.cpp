/*
Реализуйте построение арифметического выражения согласно следующей схеме:

	► изначально есть выражение, состоящее из некоторого целого числа x;

	► на каждом шаге к текущему выражению применяется некоторая операция:
	  прибавление числа, вычитание числа, умножение на число или деление на
	  число; перед применением операции выражение всегда должно быть заключено
	  в скобки.

			►►► Формат ввода ◄◄◄
В первой строке содержится исходное целое число x. Во второй строке содержится
целое неотрицательное число N— количество операций. В каждой из следующих N
строк содержится очередная операция:

	► прибавление числа a: + a;
	► либо вычитание числа b: - b;
	► либо умножение на число c: * c;
	► либо деление на число d: / d.

Количество операций может быть нулевым — в этом случае необходимо вывести исходное число.

			►►► Формат вывода ◄◄◄
Выведите единственную строку — построенное арифметическое выражение.

Обратите внимание на расстановку пробелов вокруг символов:

	► каждый символ бинарной операции (+, -, * или /) должен быть
	  окружён ровно одним пробелом с каждой стороны: (8) * 3;
	► символ унарного минуса (для отрицательных чисел) не нуждается
	  в дополнительном пробеле: -5;
	► скобки и числа не нуждаются в дополнительных пробелах.

			►►► Подсказка ◄◄◄
Для преобразования числа к строке используйте функцию to_string из библиотеки <string>.

*/

#include <iostream>
#include <string>
#include <deque>
using namespace std;



int main() {
	string result, operation;
	int x, N, y;
	cin >> x >> N;
	deque<string> expression(N);

	if (N == 0) {
		expression.push_back(to_string(x));
	} else {
		expression.push_front(")");
		expression.push_front(to_string(x));
		expression.push_front("(");
	}

	for (int i = 0; i < N; ++i) {
		cin >> operation >> y;
		if (i == N - 1) {
			expression.push_back(" ");
			expression.push_back(operation);
			expression.push_back(" ");
			expression.push_back(to_string(y));
			break;
		}
		expression.push_front("(");
		expression.push_back(" ");
		expression.push_back(operation);
		expression.push_back(" ");
		expression.push_back(to_string(y));
		expression.push_back(")");
	}
	for (auto i : expression) {
		cout << i;
	}
	return 0;
}
